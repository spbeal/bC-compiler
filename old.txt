program  :  program term
   |  term  {$$=$1;}
   ;
term  :
      OP {printToken(yylval->tokenData, "OP");}
   |  EQ {printToken(yylval->tokenData, "EQ");}
   |  NEQ {printToken(yylval->tokenData, "NEQ");}
   |  LEQ {printToken(yylval->tokenData, "LEQ");}
   |  GEQ {printToken(yylval->tokenData, "GEQ");}
   |  MAX {printToken(yylval->tokenData, "MAX");}
   |  MIN {printToken(yylval->tokenData, "MIN");}
   |  ADDASS {printToken(yylval->tokenData, "ADDASS");}
   |  MULASS {printToken(yylval->tokenData, "MULASS");}
   |  SUBASS {printToken(yylval->tokenData, "SUBASS");}
   |  DIVASS {printToken(yylval->tokenData, "DIVASS");}
   |  DEC {printToken(yylval->tokenData, "DEC");}
   |  INC {printToken(yylval->tokenData, "INC");}
   |  AND {printToken(yylval->tokenData, "AND");}
   |  NOT {printToken(yylval->tokenData, "NOT");}
   |  OR {printToken(yylval->tokenData, "OR");}

   |  COMMENT {;}

   |  INT {printToken(yylval->tokenData, "INT");}
   |  BOOL {printToken(yylval->tokenData, "BOOL");}
   |  BOOLCONST {printToken(yylval->tokenData, "BOOLCONST");}
   |  CHAR {printToken(yylval->tokenData, "CHAR");}

   |  RETURN {printToken(yylval->tokenData, "RETURN");}
   |  BREAK {printToken(yylval->tokenData, "BREAK");}
   |  THEN {printToken(yylval->tokenData, "THEN");}
   |  IF {printToken(yylval->tokenData, "IF");}
   |  FOR {printToken(yylval->tokenData, "FOR");}
   |  WHILE {printToken(yylval->tokenData, "WHILE");}
   |  ELSE {printToken(yylval->tokenData, "ELSE");}
   |  STATIC {printToken(yylval->tokenData, "STATIC");}
   |  TO {printToken(yylval->tokenData, "TO");}
   |  DO {printToken(yylval->tokenData, "DO");}
   |  BY {printToken(yylval->tokenData, "BY");}


   |  ID {printToken(yylval->tokenData, "ID");}
   |  CHARCONST {printToken(yylval->tokenData, "CHARCONST");}
   |  STRINGCONST {printToken(yylval->tokenData, "STRINGCONST");}
   |  PRECOMPILER {printToken(yylval->tokenData, "PRECOMPILER");}
   |  NUMCONST {printToken(yylval->tokenData, "NUMCONST");}
   |  ERROR    {cout << "ERROR(SCANNER Line " << yylval->tokenData.linenum << "): Invalid input character " << yylval->tokenData.tokenstr << endl; }
   ;